// Generated by https://github.com/empirefox/makeplural
// at 2019-04-29 22:58:05.255677719 +0800 CST m=+7.582401734
//
// URL: https://github.com/unicode-cldr/cldr-core/raw/master/supplemental/ordinals.json
// $Revision: 14855 $
//
// URL: https://github.com/unicode-cldr/cldr-core/raw/master/supplemental/plurals.json
// $Revision: 14885 $

package plural

import (
	"github.com/empirefox/makeplural/cases"
)

var Cultures = []cases.Culture{
	cases.Culture{
		Name: "af", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ak", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "am", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ar", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && n100 >= 3 && n100 <= 10", "many": "p && n100 >= 11 && n100 <= 99", "one": "n == 1", "two": "n == 2", "zero": "n == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "10", "103", "110", "1003"},
					Decimals: []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "103.0", "1003.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"11", "26", "111", "1011"},
					Decimals: []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0"},
					Decimals: []string{"0.0", "0.00", "0.000", "0.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"100", "102", "200", "202", "300", "302", "400", "402", "500", "502", "600", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ars", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && n100 >= 3 && n100 <= 10", "many": "p && n100 >= 11 && n100 <= 99", "one": "n == 1", "two": "n == 2", "zero": "n == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "10", "103", "110", "1003"},
					Decimals: []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "103.0", "1003.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"11", "26", "111", "1011"},
					Decimals: []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0"},
					Decimals: []string{"0.0", "0.00", "0.000", "0.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"100", "102", "200", "202", "300", "302", "400", "402", "500", "502", "600", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "as", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string{"few": "n == 4", "many": "n == 6", "one": "n == 1 || n == 5 || n == 7 || n == 8 || n == 9 || n == 10", "two": "n == 2 || n == 3"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "5", "7", "10"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "11", "25", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "asa", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ast", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "az", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"few": "i10 == 3 || i10 == 4 || i1000 == 100 || i1000 == 200 || i1000 == 300 || i1000 == 400 || i1000 == 500 || i1000 == 600 || i1000 == 700 || i1000 == 800 || i1000 == 900", "many": "i == 0 || i10 == 6 || i100 == 40 || i100 == 60 || i100 == 90", "one": "i10 == 1 || i10 == 2 || i10 == 5 || i10 == 7 || i10 == 8 || i100 == 20 || i100 == 50 || i100 == 70 || i100 == 80"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "2", "5", "7", "8", "11", "12", "15", "17", "18", "20", "22", "25", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "4", "13", "14", "23", "24", "33", "34", "43", "44", "53", "54", "63", "64", "73", "74", "100", "1003"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"0", "6", "16", "26", "36", "40", "46", "56", "106", "1006"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"9", "10", "19", "29", "30", "39", "49", "59", "69", "79", "109", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    1000,
			},
		},
	},
	cases.Culture{
		Name: "be", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && n10 >= 2 && n10 <= 4 && (n100 < 12 || n100 > 14)", "many": "n10 == 0 || p && n10 >= 5 && n10 <= 9 || p && n100 >= 11 && n100 <= 14", "one": "n10 == 1 && n100 != 11"},
		Ordinal:  map[string]string{"few": "(n10 == 2 || n10 == 3) && n100 != 12 && n100 != 13"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "71.0", "81.0", "101.0", "1001.0"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string{"2.0", "3.0", "4.0", "22.0", "23.0", "24.0", "32.0", "33.0", "102.0", "1002.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string(nil),
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.1", "100.1", "1000.1"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "3", "22", "23", "32", "33", "42", "43", "52", "53", "62", "63", "72", "73", "82", "83", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "1", "4", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "bem", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "bez", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "bg", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "bh", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "bn", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string{"few": "n == 4", "many": "n == 6", "one": "n == 1 || n == 5 || n == 7 || n == 8 || n == 9 || n == 10", "two": "n == 2 || n == 3"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "5", "7", "10"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "11", "25", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "br", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && (p && n10 >= 3 && n10 <= 4 || n10 == 9) && (n100 < 10 || n100 > 19) && (n100 < 70 || n100 > 79) && (n100 < 90 || n100 > 99)", "many": "n != 0 && n1000000 == 0", "one": "n10 == 1 && n100 != 11 && n100 != 71 && n100 != 91", "two": "n10 == 2 && n100 != 12 && n100 != 72 && n100 != 92"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "81", "101", "1001"},
					Decimals: []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "81.0", "101.0", "1001.0"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "22", "32", "42", "52", "62", "82", "102", "1002"},
					Decimals: []string{"2.0", "22.0", "32.0", "42.0", "52.0", "62.0", "82.0", "102.0", "1002.0"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "4", "9", "23", "24", "29", "33", "34", "39", "43", "44", "49", "103", "1003"},
					Decimals: []string{"3.0", "4.0", "9.0", "23.0", "24.0", "29.0", "33.0", "34.0", "103.0", "1003.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"1000000"},
					Decimals: []string{"1000000.0", "1000000.00", "1000000.000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "8", "10", "20", "100", "1000", "10000", "100000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    1000000,
			},
		},
	},
	cases.Culture{
		Name: "brx", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "bs", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14) || f10 >= 2 && f10 <= 4 && (f100 < 12 || f100 > 14)", "one": "v == 0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string{"0.2", "0.4", "1.2", "1.4", "2.2", "2.4", "3.2", "3.4", "4.2", "4.4", "5.2", "10.2", "100.2", "1000.2"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ca", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"few": "n == 4", "one": "n == 1 || n == 3", "two": "n == 2"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ce", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ceb", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "v == 0 && (i == 1 || i == 2 || i == 3) || v == 0 && i10 != 4 && i10 != 6 && i10 != 9 || v != 0 && f10 != 4 && f10 != 6 && f10 != 9"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "3", "5", "7", "8", "10", "13", "15", "17", "18", "20", "21", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.3", "0.5", "0.7", "0.8", "1.0", "1.3", "1.5", "1.7", "1.8", "2.0", "2.1", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"4", "6", "9", "14", "16", "19", "24", "26", "104", "1004"},
					Decimals: []string{"0.4", "0.6", "0.9", "1.4", "1.6", "1.9", "2.4", "2.6", "10.4", "100.4", "1000.4"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "cgg", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "chr", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ckb", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "cs", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "i >= 2 && i <= 4 && v == 0", "many": "v != 0", "one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string(nil),
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "cy", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "n == 3", "many": "n == 6", "one": "n == 1", "two": "n == 2", "zero": "n == 0"},
		Ordinal:  map[string]string{"few": "n == 3 || n == 4", "many": "n == 5 || n == 6", "one": "n == 1", "two": "n == 2", "zero": "n == 0 || n == 7 || n == 8 || n == 9"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3"},
					Decimals: []string{"3.0", "3.00", "3.000", "3.0000"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6"},
					Decimals: []string{"6.0", "6.00", "6.000", "6.0000"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0"},
					Decimals: []string{"0.0", "0.00", "0.000", "0.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"4", "5", "7", "20", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"5", "6"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0", "7", "9"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"10", "25", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "da", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x74, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1 || t != 0 && (i == 0 || i == 1)"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"0.1", "1.6"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "2.0", "3.4", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "de", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "dsb", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i100 >= 3 && i100 <= 4 || f100 >= 3 && f100 <= 4", "one": "v == 0 && i100 == 1 || f100 == 1", "two": "v == 0 && i100 == 2 || f100 == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"},
					Decimals: []string{"0.2", "1.2", "2.2", "3.2", "4.2", "5.2", "6.2", "7.2", "10.2", "100.2", "1000.2"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"},
					Decimals: []string{"0.3", "0.4", "1.3", "1.4", "2.3", "2.4", "3.3", "3.4", "4.3", "4.4", "5.3", "5.4", "6.3", "6.4", "7.3", "7.4", "10.3", "100.3", "1000.3"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "dv", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ee", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "el", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "en", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"few": "n10 == 3 && n100 != 13", "one": "n10 == 1 && n100 != 11", "two": "n10 == 2 && n100 != 12"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "22", "32", "42", "52", "62", "72", "82", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "23", "33", "43", "53", "63", "73", "83", "103", "1003"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "4", "18", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "eo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "es", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "et", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "eu", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "fa", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ff", F: 0x0, I: 0x69, N: 0x0, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || i == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.5"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"2.0", "3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "fi", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "fil", F: 0x66, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "v == 0 && (i == 1 || i == 2 || i == 3) || v == 0 && i10 != 4 && i10 != 6 && i10 != 9 || v != 0 && f10 != 4 && f10 != 6 && f10 != 9"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "3", "5", "7", "8", "10", "13", "15", "17", "18", "20", "21", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.3", "0.5", "0.7", "0.8", "1.0", "1.3", "1.5", "1.7", "1.8", "2.0", "2.1", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"4", "6", "9", "14", "16", "19", "24", "26", "104", "1004"},
					Decimals: []string{"0.4", "0.6", "0.9", "1.4", "1.6", "1.9", "2.4", "2.6", "10.4", "100.4", "1000.4"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "fo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "fr", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || i == 1"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.5"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"2.0", "3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "fur", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "fy", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ga", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && n >= 3 && n <= 6", "many": "p && n >= 7 && n <= 10", "one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "6"},
					Decimals: []string{"3.0", "4.0", "5.0", "6.0", "3.00", "4.00", "5.00", "6.00", "3.000", "4.000", "5.000", "6.000", "3.0000", "4.0000", "5.0000", "6.0000"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"7", "10"},
					Decimals: []string{"7.0", "8.0", "9.0", "10.0", "7.00", "8.00", "9.00", "10.00", "7.000", "8.000", "9.000", "10.000", "7.0000", "8.0000", "9.0000", "10.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "11", "25", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "gd", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && n >= 3 && n <= 10 || p && n >= 13 && n <= 19", "one": "n == 1 || n == 11", "two": "n == 2 || n == 12"},
		Ordinal:  map[string]string{"few": "n == 3 || n == 13", "one": "n == 1 || n == 11", "two": "n == 2 || n == 12"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "11"},
					Decimals: []string{"1.0", "11.0", "1.00", "11.00", "1.000", "11.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "12"},
					Decimals: []string{"2.0", "12.0", "2.00", "12.00", "2.000", "12.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "10", "13", "19"},
					Decimals: []string{"3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "3.00"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "20", "34", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "11"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "12"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "13"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "4", "10", "14", "21", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "gl", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "gsw", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "gu", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string{"few": "n == 4", "many": "n == 6", "one": "n == 1", "two": "n == 2 || n == 3"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "7", "20", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "guw", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "gv", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && (i100 == 0 || i100 == 20 || i100 == 40 || i100 == 60 || i100 == 80)", "many": "v != 0", "one": "v == 0 && i10 == 1", "two": "v == 0 && i10 == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "11", "21", "31", "41", "51", "61", "71", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "12", "22", "32", "42", "52", "62", "72", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"0", "20", "40", "60", "80", "100", "120", "140", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string(nil),
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"3", "10", "13", "19", "23", "103", "1003"},
					Decimals: []string(nil),
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ha", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "haw", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "he", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"many": "p && v == 0 && (n < 0 || n > 10) && n10 == 0", "one": "i == 1 && v == 0", "two": "i == 2 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"20", "30", "40", "50", "60", "70", "80", "90", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "101", "1001"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "hi", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string{"few": "n == 4", "many": "n == 6", "one": "n == 1", "two": "n == 2 || n == 3"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "7", "20", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "hr", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14) || f10 >= 2 && f10 <= 4 && (f100 < 12 || f100 > 14)", "one": "v == 0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string{"0.2", "0.4", "1.2", "1.4", "2.2", "2.4", "3.2", "3.4", "4.2", "4.4", "5.2", "10.2", "100.2", "1000.2"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "hsb", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i100 >= 3 && i100 <= 4 || f100 >= 3 && f100 <= 4", "one": "v == 0 && i100 == 1 || f100 == 1", "two": "v == 0 && i100 == 2 || f100 == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"},
					Decimals: []string{"0.2", "1.2", "2.2", "3.2", "4.2", "5.2", "6.2", "7.2", "10.2", "100.2", "1000.2"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"},
					Decimals: []string{"0.3", "0.4", "1.3", "1.4", "2.3", "2.4", "3.3", "3.4", "4.3", "4.4", "5.3", "5.4", "6.3", "6.4", "7.3", "7.4", "10.3", "100.3", "1000.3"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "hu", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"one": "n == 1 || n == 5"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "5"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "4", "6", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "hy", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || i == 1"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.5"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"2.0", "3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ia", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "io", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "is", F: 0x0, I: 0x69, N: 0x0, V: 0x0, T: 0x74, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "t == 0 && i10 == 1 && i100 != 11 || t != 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.6", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "it", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"many": "n == 11 || n == 8 || n == 80 || n == 800"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"8", "11", "80", "800"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "7", "9", "10", "12", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "iu", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "iw", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"many": "p && v == 0 && (n < 0 || n > 10) && n10 == 0", "one": "i == 1 && v == 0", "two": "i == 2 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"20", "30", "40", "50", "60", "70", "80", "90", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "101", "1001"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "jgo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ji", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "jmc", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ka", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"many": "i == 0 || i100 >= 2 && i100 <= 20 || i100 == 40 || i100 == 60 || i100 == 80", "one": "i == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"0", "2", "16", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"21", "36", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "kab", F: 0x0, I: 0x69, N: 0x0, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || i == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.5"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"2.0", "3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "kaj", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "kcg", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "kk", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"many": "n10 == 6 || n10 == 9 || n10 == 0 && n != 0"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6", "9", "10", "16", "19", "20", "26", "29", "30", "36", "39", "40", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "7", "8", "11", "15", "17", "18", "21", "101", "1001"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "kkj", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "kl", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "kn", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ks", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ksb", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ksh", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "zero": "n == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0"},
					Decimals: []string{"0.0", "0.00", "0.000", "0.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ku", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "kw", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "n100 == 3 || n100 == 23 || n100 == 43 || n100 == 63 || n100 == 83", "many": "n != 1 && (n100 == 1 || n100 == 21 || n100 == 41 || n100 == 61 || n100 == 81)", "one": "n == 1", "two": "n100 == 2 || n100 == 22 || n100 == 42 || n100 == 62 || n100 == 82", "zero": "n == 0"},
		Ordinal:  map[string]string{"many": "n == 5 || n100 == 5", "one": "p && n >= 1 && n <= 4 || p && n100 >= 1 && n100 <= 4 || p && n100 >= 21 && n100 <= 24 || p && n100 >= 41 && n100 <= 44 || p && n100 >= 61 && n100 <= 64 || p && n100 >= 81 && n100 <= 84"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "22", "42", "62", "82", "102", "122", "142", "1002"},
					Decimals: []string{"2.0", "22.0", "42.0", "62.0", "82.0", "102.0", "122.0", "142.0", "1002.0"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "23", "43", "63", "83", "103", "123", "143", "1003"},
					Decimals: []string{"3.0", "23.0", "43.0", "63.0", "83.0", "103.0", "123.0", "143.0", "1003.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"21", "41", "61", "81", "101", "121", "141", "161", "1001"},
					Decimals: []string{"21.0", "41.0", "61.0", "81.0", "101.0", "121.0", "141.0", "161.0", "1001.0"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0"},
					Decimals: []string{"0.0", "0.00", "0.000", "0.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"4", "19", "100", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "4", "21", "24", "41", "44", "61", "64", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"5", "105", "205", "305", "405", "505", "605", "705", "1005"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "6", "20", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ky", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "lag", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "(i == 0 || i == 1) && n != 0", "zero": "n == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"0.1", "1.6"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0"},
					Decimals: []string{"0.0", "0.00", "0.000", "0.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"2.0", "3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "lb", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "lg", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ln", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "lo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string(nil),
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "lt", F: 0x66, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"few": "p && n10 >= 2 && n10 <= 9 && (n100 < 11 || n100 > 19)", "many": "f != 0", "one": "p && n10 == 1 && (n100 < 11 || n100 > 19)"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"1.0", "21.0", "31.0", "41.0", "51.0", "61.0", "71.0", "81.0", "101.0", "1001.0"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "9", "22", "29", "102", "1002"},
					Decimals: []string{"2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "22.0", "102.0", "1002.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string(nil),
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "10", "20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "lv", F: 0x66, I: 0x0, N: 0x6e, V: 0x76, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"one": "n10 == 1 && n100 != 11 || v == 2 && f10 == 1 && f100 != 11 || v != 2 && f10 == 1", "zero": "n10 == 0 || p && n100 >= 11 && n100 <= 19 || v == 2 && f100 >= 11 && f100 <= 19"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.0", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0", "10", "20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "9", "22", "29", "102", "1002"},
					Decimals: []string{"0.2", "0.9", "1.2", "1.9", "10.2", "100.2", "1000.2"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "mas", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "mg", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "mgo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "mk", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "v == 0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11"},
		Ordinal:  map[string]string{"many": "(i10 == 7 || i10 == 8) && i100 != 17 && i100 != 18", "one": "i10 == 1 && i100 != 11", "two": "i10 == 2 && i100 != 12"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.2", "1.0", "1.2", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "22", "32", "42", "52", "62", "72", "82", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"7", "8", "27", "28", "37", "38", "47", "48", "57", "58", "67", "68", "77", "78", "87", "88", "107", "1007"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "6", "9", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ml", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "mn", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "mo", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"few": "v != 0 || n == 0 || p && n100 >= 2 && n100 <= 19", "one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"0", "2", "16", "102", "1002"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"20", "35", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "mr", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"few": "n == 4", "one": "n == 1", "two": "n == 2 || n == 3"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ms", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string(nil),
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "mt", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "n == 0 || p && n100 >= 2 && n100 <= 10", "many": "p && n100 >= 11 && n100 <= 19", "one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"0", "2", "10", "102", "107", "1002"},
					Decimals: []string{"0.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "10.0", "102.0", "1002.0"},
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"11", "19", "111", "117", "1011"},
					Decimals: []string{"11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "111.0", "1011.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"20", "35", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "nah", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "naq", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nb", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nd", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ne", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"one": "p && n >= 1 && n <= 4"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nl", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nn", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nnh", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "no", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nr", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nso", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ny", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "nyn", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "om", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "or", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"few": "n == 4", "many": "n == 6", "one": "n == 1 || n == 5 || p && n >= 7 && n <= 9", "two": "n == 2 || n == 3"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "5", "7", "9"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "3"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"6"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "10", "24", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "os", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "pa", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "pap", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "pl", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14)", "many": "v == 0 && i != 1 && i10 >= 0 && i10 <= 1 || v == 0 && i10 >= 5 && i10 <= 9 || v == 0 && i100 >= 12 && i100 <= 14", "one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string(nil),
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "prg", F: 0x66, I: 0x0, N: 0x6e, V: 0x76, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"one": "n10 == 1 && n100 != 11 || v == 2 && f10 == 1 && f100 != 11 || v != 2 && f10 == 1", "zero": "n10 == 0 || p && n100 >= 11 && n100 <= 19 || v == 2 && f100 >= 11 && f100 <= 19"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.0", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "zero",
					Integers: []string{"0", "10", "20", "30", "40", "50", "60", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "9", "22", "29", "102", "1002"},
					Decimals: []string{"0.2", "0.9", "1.2", "1.9", "10.2", "100.2", "1000.2"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "ps", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "pt", F: 0x0, I: 0x69, N: 0x0, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i >= 0 && i <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.5"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"2.0", "3.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "pt-PT", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "rm", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ro", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x77, P: 0x70,
		Cardinal: map[string]string{"few": "v != 0 || n == 0 || p && n100 >= 2 && n100 <= 19", "one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"0", "2", "16", "102", "1002"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"20", "35", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "rof", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ru", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14)", "many": "v == 0 && i10 == 0 || v == 0 && i10 >= 5 && i10 <= 9 || v == 0 && i100 >= 11 && i100 <= 14", "one": "v == 0 && i10 == 1 && i100 != 11"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string(nil),
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "rwk", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "saq", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sc", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"many": "n == 11 || n == 8 || n == 80 || n == 800"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"8", "11", "80", "800"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "7", "9", "10", "12", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "scn", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"many": "n == 11 || n == 8 || n == 80 || n == 800"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"8", "11", "80", "800"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "7", "9", "10", "12", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sd", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sdh", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "se", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "seh", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sh", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14) || f10 >= 2 && f10 <= 4 && (f100 < 12 || f100 > 14)", "one": "v == 0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string{"0.2", "0.4", "1.2", "1.4", "2.2", "2.4", "3.2", "3.4", "4.2", "4.4", "5.2", "10.2", "100.2", "1000.2"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "shi", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"few": "p && n >= 2 && n <= 10", "one": "i == 0 || n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "10"},
					Decimals: []string{"2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "2.00", "3.00", "4.00", "5.00", "6.00", "7.00", "8.00"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"11", "26", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "1.9", "2.1", "2.7", "10.1", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "si", F: 0x66, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 0 || n == 1 || i == 0 && f == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "0.1", "1.0", "0.00", "0.01", "1.00", "0.000", "0.001", "1.000", "0.0000", "0.0001", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.2", "0.9", "1.1", "1.8", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sk", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "i >= 2 && i <= 4 && v == 0", "many": "v != 0", "one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string(nil),
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sl", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i100 >= 3 && i100 <= 4 || v != 0", "one": "v == 0 && i100 == 1", "two": "v == 0 && i100 == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "101", "201", "301", "401", "501", "601", "701", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2", "102", "202", "302", "402", "502", "602", "702", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "4", "103", "104", "203", "204", "303", "304", "403", "404", "503", "504", "603", "604", "703", "704", "1003"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "sma", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "smi", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "smj", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "smn", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sms", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1", "two": "n == 2"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "two",
					Integers: []string{"2"},
					Decimals: []string{"2.0", "2.00", "2.000", "2.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sn", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "so", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sq", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"many": "n10 == 4 && n100 != 14", "one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"4", "24", "34", "44", "54", "64", "74", "84", "104", "1004"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "3", "5", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "sr", F: 0x66, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14) || f10 >= 2 && f10 <= 4 && (f100 < 12 || f100 > 14)", "one": "v == 0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string{"0.1", "1.1", "2.1", "3.1", "4.1", "5.1", "6.1", "7.1", "10.1", "100.1", "1000.1"},
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string{"0.2", "0.4", "1.2", "1.4", "2.2", "2.4", "3.2", "3.4", "4.2", "4.4", "5.2", "10.2", "100.2", "1000.2"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "2.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ss", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ssy", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "st", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "sv", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string{"one": "(n10 == 1 || n10 == 2) && n100 != 11 && n100 != 12"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "2", "21", "22", "31", "32", "41", "42", "51", "52", "61", "62", "71", "72", "81", "82", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "3", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "sw", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "syr", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ta", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "te", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "teo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ti", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "tig", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "tk", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string{"few": "n10 == 6 || n10 == 9 || n == 10"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"6", "9", "10", "16", "19", "26", "29", "36", "39", "106", "1006"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "5", "7", "8", "11", "15", "17", "18", "20", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "tl", F: 0x66, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "v == 0 && (i == 1 || i == 2 || i == 3) || v == 0 && i10 != 4 && i10 != 6 && i10 != 9 || v != 0 && f10 != 4 && f10 != 6 && f10 != 9"},
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "3", "5", "7", "8", "10", "13", "15", "17", "18", "20", "21", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.3", "0.5", "0.7", "0.8", "1.0", "1.3", "1.5", "1.7", "1.8", "2.0", "2.1", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"4", "6", "9", "14", "16", "19", "24", "26", "104", "1004"},
					Decimals: []string{"0.4", "0.6", "0.9", "1.4", "1.6", "1.9", "2.4", "2.6", "10.4", "100.4", "1000.4"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x66,
				Mod:    10,
			},
		},
	},
	cases.Culture{
		Name: "tn", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "tr", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ts", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "tzm", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1 || p && n >= 11 && n <= 99"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1", "11", "24"},
					Decimals: []string{"0.0", "1.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "20.0", "21.0", "22.0", "23.0", "24.0"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "10", "100", "106", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ug", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "uk", F: 0x0, I: 0x69, N: 0x6e, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"few": "v == 0 && i10 >= 2 && i10 <= 4 && (i100 < 12 || i100 > 14)", "many": "v == 0 && i10 == 0 || v == 0 && i10 >= 5 && i10 <= 9 || v == 0 && i100 >= 11 && i100 <= 14", "one": "v == 0 && i10 == 1 && i100 != 11"},
		Ordinal:  map[string]string{"few": "n10 == 3 && n100 != 13"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1", "21", "31", "41", "51", "61", "71", "81", "101", "1001"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"2", "4", "22", "24", "32", "34", "42", "44", "52", "54", "62", "102", "1002"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "many",
					Integers: []string{"0", "5", "19", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string(nil),
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "few",
					Integers: []string{"3", "23", "33", "43", "53", "63", "73", "83", "103", "1003"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "4", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var{
			cases.Var{
				Symbol: 0x6e,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x6e,
				Mod:    100,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    10,
			},
			cases.Var{
				Symbol: 0x69,
				Mod:    100,
			},
		},
	},
	cases.Culture{
		Name: "ur", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "uz", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "ve", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "vi", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string(nil),
		Ordinal:  map[string]string{"one": "n == 1"},
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "vo", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "vun", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "wa", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x70,
		Cardinal: map[string]string{"one": "p && n >= 0 && n <= 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "1.00", "0.000", "1.000", "0.0000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.1", "0.9", "1.1", "1.7", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "wae", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "xh", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "xog", F: 0x0, I: 0x0, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string{"1.0", "1.00", "1.000", "1.0000"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "0.9", "1.1", "1.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "yi", F: 0x0, I: 0x69, N: 0x0, V: 0x76, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 1 && v == 0"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"1"},
					Decimals: []string(nil),
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "2", "16", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"0.0", "1.5", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest(nil),
		},
		Vars: []cases.Var(nil),
	},
	cases.Culture{
		Name: "zu", F: 0x0, I: 0x69, N: 0x6e, V: 0x0, T: 0x0, W: 0x0, P: 0x0,
		Cardinal: map[string]string{"one": "i == 0 || n == 1"},
		Ordinal:  map[string]string(nil),
		Tests: cases.UnitTests{
			Cardinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "one",
					Integers: []string{"0", "1"},
					Decimals: []string{"0.0", "1.0", "0.00", "0.04"},
				},
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"2", "17", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string{"1.1", "2.6", "10.0", "100.0", "1000.0", "10000.0", "100000.0", "1000000.0"},
				},
			},
			Ordinal: []cases.UnitTest{
				cases.UnitTest{
					Expected: "other",
					Integers: []string{"0", "15", "100", "1000", "10000", "100000", "1000000"},
					Decimals: []string(nil),
				},
			},
		},
		Vars: []cases.Var(nil),
	},
}

var Others = []string{"bm", "bo", "dz", "id", "ig", "ii", "in", "ja", "jbo", "jv", "jw", "kde", "kea", "km", "ko", "lkt", "my", "nqo", "root", "sah", "ses", "sg", "th", "to", "wo", "yo", "yue", "zh"}
