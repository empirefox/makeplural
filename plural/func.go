// Generated by https://github.com/gotnospirit/makeplural
// at Mon, 08 Jun 2015 15:26:55 +0200
//
// URL: https://github.com/unicode-cldr/cldr-core/raw/master/supplemental/ordinals.json
// $Revision: 11229 $
// $Date: 2015-02-18 09:11:57 -0600 (Wed, 18 Feb 2015) $
//
// URL: https://github.com/unicode-cldr/cldr-core/raw/master/supplemental/plurals.json
// $Revision: 11229 $
// $Date: 2015-02-18 09:11:57 -0600 (Wed, 18 Feb 2015) $

package plural

import (
    "fmt"
    "strconv"
    "strings"
)

func fivt(n float64) (int, int, int, int) {
    str_value := strconv.FormatFloat(n, 'f', -1, 64)
    pos := strings.Index(str_value, ".")
    if -1 == pos {
        return 0, int(n), 0, 0
    }
    f, _ := strconv.Atoi(str_value[pos + 1:])
    i, _ := strconv.Atoi(str_value[:pos])
    return f, i, len(str_value) - pos - 1, f
}

var plural_funcs map[string]func(float64, bool) string

func init() {
    plural_funcs = make(map[string]func(float64, bool) string)

    plural_funcs["af"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ak"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["am"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["ar"] = func(n float64, ordinal bool) string {
		i := int(n)
		n100 := i % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 0:
			return "zero"

		case n == 1:
			return "one"

		case n == 2:
			return "two"

		case n100 >= 3 && n100 <= 10:
			return "few"

		case n100 >= 11 && n100 <= 99:
			return "many"
		}
    }

    plural_funcs["as"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case (n == 1) || (n == 5) || (n == 7) || (n == 8) || (n == 9) || (n == 10):
				return "one"

			case (n == 2) || (n == 3):
				return "two"

			case n == 4:
				return "few"

			case n == 6:
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["asa"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ast"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["az"] = func(n float64, ordinal bool) string {
		i := int(n)
		i10 := i % 10
		i100 := i % 100
		i1000 := i % 1000

		if ordinal {
			switch {
			default:
				return "other"

			case (i10 == 1) || (i10 == 2) || (i10 == 5) || (i10 == 7) || (i10 == 8), (i100 == 20) || (i100 == 50) || (i100 == 70) || (i100 == 80):
				return "one"

			case (i10 == 3) || (i10 == 4), (i1000 == 100) || (i1000 == 200) || (i1000 == 300) || (i1000 == 400) || (i1000 == 500) || (i1000 == 600) || (i1000 == 700) || (i1000 == 800) || (i1000 == 900):
				return "few"

			case i == 0, i10 == 6, (i100 == 40) || (i100 == 60) || (i100 == 90):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["be"] = func(n float64, ordinal bool) string {
		i := int(n)
		n10 := i % 10
		n100 := i % 100

		switch {
		default:
			return "other"

		case (n10 == 1) && (n100 != 11):
			return "one"

		case (n10 >= 2 && n10 <= 4) && (n100 < 12 || n100 > 14):
			return "few"

		case n10 == 0, n10 >= 5 && n10 <= 9, n100 >= 11 && n100 <= 14:
			return "many"
		}
    }

    plural_funcs["bem"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["bez"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["bg"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["bh"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["bm"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["bn"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case (n == 1) || (n == 5) || (n == 7) || (n == 8) || (n == 9) || (n == 10):
				return "one"

			case (n == 2) || (n == 3):
				return "two"

			case n == 4:
				return "few"

			case n == 6:
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["bo"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["br"] = func(n float64, ordinal bool) string {
		i := int(n)
		n10 := i % 10
		n100 := i % 100
		n1000000 := i % 1000000

		switch {
		default:
			return "other"

		case (n10 == 1) && ((n100 != 11) && (n100 != 71) && (n100 != 91)):
			return "one"

		case (n10 == 2) && ((n100 != 12) && (n100 != 72) && (n100 != 92)):
			return "two"

		case ((n10 >= 3 && n10 <= 4) || (n10 == 9)) && ((n100 < 10 || n100 > 19) && (n100 < 70 || n100 > 79) && (n100 < 90 || n100 > 99)):
			return "few"

		case (n != 0) && (n1000000 == 0):
			return "many"
		}
    }

    plural_funcs["brx"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["bs"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100
		f10 := f % 10
		f100 := f % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1) && (i100 != 11), (f10 == 1) && (f100 != 11):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14), (f10 >= 2 && f10 <= 4) && (f100 < 12 || f100 > 14):
			return "few"
		}
    }

    plural_funcs["ca"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			switch {
			default:
				return "other"

			case (n == 1) || (n == 3):
				return "one"

			case n == 2:
				return "two"

			case n == 4:
				return "few"
			}
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["ce"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["cgg"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["chr"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ckb"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["cs"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case (i >= 2 && i <= 4) && (v == 0):
			return "few"

		case v != 0:
			return "many"
		}
    }

    plural_funcs["cy"] = func(n float64, ordinal bool) string {
		if ordinal {
			switch {
			default:
				return "other"

			case (n == 0) || (n == 7) || (n == 8) || (n == 9):
				return "zero"

			case n == 1:
				return "one"

			case n == 2:
				return "two"

			case (n == 3) || (n == 4):
				return "few"

			case (n == 5) || (n == 6):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case n == 0:
			return "zero"

		case n == 1:
			return "one"

		case n == 2:
			return "two"

		case n == 3:
			return "few"

		case n == 6:
			return "many"
		}
    }

    plural_funcs["da"] = func(n float64, ordinal bool) string {
		_, i, _, t := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1, (t != 0) && ((i == 0) || (i == 1)):
			return "one"
		}
    }

    plural_funcs["de"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["dsb"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i100 := i % 100
		f100 := f % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i100 == 1), f100 == 1:
			return "one"

		case (v == 0) && (i100 == 2), f100 == 2:
			return "two"

		case (v == 0) && (i100 >= 3 && i100 <= 4), f100 >= 3 && f100 <= 4:
			return "few"
		}
    }

    plural_funcs["dv"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["dz"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["ee"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["el"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["en"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n10 := i % 10
		n100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case (n10 == 1) && (n100 != 11):
				return "one"

			case (n10 == 2) && (n100 != 12):
				return "two"

			case (n10 == 3) && (n100 != 13):
				return "few"
			}
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["eo"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["es"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["et"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["eu"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["fa"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["ff"] = func(n float64, ordinal bool) string {
		i := int(n)

		switch {
		default:
			return "other"

		case (i == 0) || (i == 1):
			return "one"
		}
    }

    plural_funcs["fi"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["fil"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		f10 := f % 10

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (v == 0) && ((i == 1) || (i == 2) || (i == 3)), (v == 0) && ((i10 != 4) && (i10 != 6) && (i10 != 9)), (v != 0) && ((f10 != 4) && (f10 != 6) && (f10 != 9)):
			return "one"
		}
    }

    plural_funcs["fo"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["fr"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (i == 0) || (i == 1):
			return "one"
		}
    }

    plural_funcs["fur"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["fy"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["ga"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"

		case n >= 3 && n <= 6:
			return "few"

		case n >= 7 && n <= 10:
			return "many"
		}
    }

    plural_funcs["gd"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case (n == 1) || (n == 11):
			return "one"

		case (n == 2) || (n == 12):
			return "two"

		case (n >= 3 && n <= 10) || (n >= 13 && n <= 19):
			return "few"
		}
    }

    plural_funcs["gl"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["gsw"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["gu"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"

			case (n == 2) || (n == 3):
				return "two"

			case n == 4:
				return "few"

			case n == 6:
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["guw"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["gv"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1):
			return "one"

		case (v == 0) && (i10 == 2):
			return "two"

		case (v == 0) && ((i100 == 0) || (i100 == 20) || (i100 == 40) || (i100 == 60) || (i100 == 80)):
			return "few"

		case v != 0:
			return "many"
		}
    }

    plural_funcs["ha"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["haw"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["he"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n10 := i % 10

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case (i == 2) && (v == 0):
			return "two"

		case (v == 0) && (n < 0 || n > 10) && (n10 == 0):
			return "many"
		}
    }

    plural_funcs["hi"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"

			case (n == 2) || (n == 3):
				return "two"

			case n == 4:
				return "few"

			case n == 6:
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["hr"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100
		f10 := f % 10
		f100 := f % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1) && (i100 != 11), (f10 == 1) && (f100 != 11):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14), (f10 >= 2 && f10 <= 4) && (f100 < 12 || f100 > 14):
			return "few"
		}
    }

    plural_funcs["hsb"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i100 := i % 100
		f100 := f % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i100 == 1), f100 == 1:
			return "one"

		case (v == 0) && (i100 == 2), f100 == 2:
			return "two"

		case (v == 0) && (i100 >= 3 && i100 <= 4), f100 >= 3 && f100 <= 4:
			return "few"
		}
    }

    plural_funcs["hu"] = func(n float64, ordinal bool) string {
		if ordinal {
			switch {
			default:
				return "other"

			case (n == 1) || (n == 5):
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["hy"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (i == 0) || (i == 1):
			return "one"
		}
    }

    plural_funcs["id"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["ig"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["ii"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["in"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["is"] = func(n float64, ordinal bool) string {
		_, i, _, t := fivt(n)
		i10 := i % 10
		i100 := i % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (t == 0) && (i10 == 1) && (i100 != 11), t != 0:
			return "one"
		}
    }

    plural_funcs["it"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			switch {
			default:
				return "other"

			case (n == 11) || (n == 8) || (n == 80) || (n == 800):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["iu"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["iw"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n10 := i % 10

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case (i == 2) && (v == 0):
			return "two"

		case (v == 0) && (n < 0 || n > 10) && (n10 == 0):
			return "many"
		}
    }

    plural_funcs["ja"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["jbo"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["jgo"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ji"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["jmc"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["jv"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["jw"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["ka"] = func(n float64, ordinal bool) string {
		i := int(n)
		i100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case i == 1:
				return "one"

			case i == 0, (i100 >= 2 && i100 <= 20) || (i100 == 40) || (i100 == 60) || (i100 == 80):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["kab"] = func(n float64, ordinal bool) string {
		i := int(n)

		switch {
		default:
			return "other"

		case (i == 0) || (i == 1):
			return "one"
		}
    }

    plural_funcs["kaj"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["kcg"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["kde"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["kea"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["kk"] = func(n float64, ordinal bool) string {
		i := int(n)
		n10 := i % 10

		if ordinal {
			switch {
			default:
				return "other"

			case n10 == 6, n10 == 9, (n10 == 0) && (n != 0):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["kkj"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["kl"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["km"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["kn"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["ko"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["ks"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ksb"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ksh"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 0:
			return "zero"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ku"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["kw"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["ky"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["lag"] = func(n float64, ordinal bool) string {
		i := int(n)

		switch {
		default:
			return "other"

		case n == 0:
			return "zero"

		case ((i == 0) || (i == 1)) && (n != 0):
			return "one"
		}
    }

    plural_funcs["lb"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["lg"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["lkt"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["ln"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["lo"] = func(n float64, ordinal bool) string {
		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		return "other"
    }

    plural_funcs["lt"] = func(n float64, ordinal bool) string {
		f, _, _, _ := fivt(n)
		i := int(n)
		n10 := i % 10
		n100 := i % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (n10 == 1) && (n100 < 11 || n100 > 19):
			return "one"

		case (n10 >= 2 && n10 <= 9) && (n100 < 11 || n100 > 19):
			return "few"

		case f != 0:
			return "many"
		}
    }

    plural_funcs["lv"] = func(n float64, ordinal bool) string {
		f, _, v, _ := fivt(n)
		i := int(n)
		n10 := i % 10
		n100 := i % 100
		f100 := f % 100
		f10 := f % 10

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n10 == 0, n100 >= 11 && n100 <= 19, (v == 2) && (f100 >= 11 && f100 <= 19):
			return "zero"

		case (n10 == 1) && (n100 != 11), (v == 2) && (f10 == 1) && (f100 != 11), (v != 2) && (f10 == 1):
			return "one"
		}
    }

    plural_funcs["mas"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["mg"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["mgo"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["mk"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100
		f10 := f % 10

		if ordinal {
			switch {
			default:
				return "other"

			case (i10 == 1) && (i100 != 11):
				return "one"

			case (i10 == 2) && (i100 != 12):
				return "two"

			case ((i10 == 7) || (i10 == 8)) && ((i100 != 17) && (i100 != 18)):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1), f10 == 1:
			return "one"
		}
    }

    plural_funcs["ml"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["mn"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["mo"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case v != 0, n == 0, (n != 1) && (n100 >= 1 && n100 <= 19):
			return "few"
		}
    }

    plural_funcs["mr"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"

			case (n == 2) || (n == 3):
				return "two"

			case n == 4:
				return "few"
			}
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }

    plural_funcs["ms"] = func(n float64, ordinal bool) string {
		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		return "other"
    }

    plural_funcs["mt"] = func(n float64, ordinal bool) string {
		i := int(n)
		n100 := i % 100

		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 0, n100 >= 2 && n100 <= 10:
			return "few"

		case n100 >= 11 && n100 <= 19:
			return "many"
		}
    }

    plural_funcs["my"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["nah"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["naq"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["nb"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["nd"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ne"] = func(n float64, ordinal bool) string {
		if ordinal {
			switch {
			default:
				return "other"

			case n >= 1 && n <= 4:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["nl"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["nn"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["nnh"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["no"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["nqo"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["nr"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["nso"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["ny"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["nyn"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["om"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["or"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["os"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["pa"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["pap"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["pl"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14):
			return "few"

		case (v == 0) && (i != 1) && (i10 >= 0 && i10 <= 1), (v == 0) && (i10 >= 5 && i10 <= 9), (v == 0) && (i100 >= 12 && i100 <= 14):
			return "many"
		}
    }

    plural_funcs["prg"] = func(n float64, ordinal bool) string {
		f, _, v, _ := fivt(n)
		i := int(n)
		n10 := i % 10
		n100 := i % 100
		f100 := f % 100
		f10 := f % 10

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n10 == 0, n100 >= 11 && n100 <= 19, (v == 2) && (f100 >= 11 && f100 <= 19):
			return "zero"

		case (n10 == 1) && (n100 != 11), (v == 2) && (f10 == 1) && (f100 != 11), (v != 2) && (f10 == 1):
			return "one"
		}
    }

    plural_funcs["ps"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["pt"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (n >= 0 && n <= 2) && (n != 2):
			return "one"
		}
    }

    plural_funcs["pt-PT"] = func(n float64, ordinal bool) string {
		_, _, v, _ := fivt(n)

		switch {
		default:
			return "other"

		case (n == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["rm"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ro"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case v != 0, n == 0, (n != 1) && (n100 >= 1 && n100 <= 19):
			return "few"
		}
    }

    plural_funcs["rof"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["root"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["ru"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1) && (i100 != 11):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14):
			return "few"

		case (v == 0) && (i10 == 0), (v == 0) && (i10 >= 5 && i10 <= 9), (v == 0) && (i100 >= 11 && i100 <= 14):
			return "many"
		}
    }

    plural_funcs["rwk"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["sah"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["saq"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["se"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["seh"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ses"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["sg"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["sh"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100
		f10 := f % 10
		f100 := f % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1) && (i100 != 11), (f10 == 1) && (f100 != 11):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14), (f10 >= 2 && f10 <= 4) && (f100 < 12 || f100 > 14):
			return "few"
		}
    }

    plural_funcs["shi"] = func(n float64, ordinal bool) string {
		i := int(n)

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"

		case n >= 2 && n <= 10:
			return "few"
		}
    }

    plural_funcs["si"] = func(n float64, ordinal bool) string {
		f, i, _, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (n == 0) || (n == 1), (i == 0) && (f == 1):
			return "one"
		}
    }

    plural_funcs["sk"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"

		case (i >= 2 && i <= 4) && (v == 0):
			return "few"

		case v != 0:
			return "many"
		}
    }

    plural_funcs["sl"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		i100 := i % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i100 == 1):
			return "one"

		case (v == 0) && (i100 == 2):
			return "two"

		case (v == 0) && (i100 >= 3 && i100 <= 4), v != 0:
			return "few"
		}
    }

    plural_funcs["sma"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["smi"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["smj"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["smn"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["sms"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"

		case n == 2:
			return "two"
		}
    }

    plural_funcs["sn"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["so"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["sq"] = func(n float64, ordinal bool) string {
		i := int(n)
		n10 := i % 10
		n100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"

			case (n10 == 4) && (n100 != 14):
				return "many"
			}
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["sr"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		i100 := i % 100
		f10 := f % 10
		f100 := f % 100

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1) && (i100 != 11), (f10 == 1) && (f100 != 11):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14), (f10 >= 2 && f10 <= 4) && (f100 < 12 || f100 > 14):
			return "few"
		}
    }

    plural_funcs["ss"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ssy"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["st"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["sv"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n10 := i % 10
		n100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case ((n10 == 1) || (n10 == 2)) && ((n100 != 11) && (n100 != 12)):
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["sw"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["syr"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ta"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["te"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["teo"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["th"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["ti"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["tig"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["tk"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["tl"] = func(n float64, ordinal bool) string {
		f, i, v, _ := fivt(n)
		i10 := i % 10
		f10 := f % 10

		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		switch {
		default:
			return "other"

		case (v == 0) && ((i == 1) || (i == 2) || (i == 3)), (v == 0) && ((i10 != 4) && (i10 != 6) && (i10 != 9)), (v != 0) && ((f10 != 4) && (f10 != 6) && (f10 != 9)):
			return "one"
		}
    }

    plural_funcs["tn"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["to"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["tr"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ts"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["tzm"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1, n >= 11 && n <= 99:
			return "one"
		}
    }

    plural_funcs["ug"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["uk"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)
		n10 := i % 10
		n100 := i % 100
		i10 := i % 10
		i100 := i % 100

		if ordinal {
			switch {
			default:
				return "other"

			case (n10 == 3) && (n100 != 13):
				return "few"
			}
		}

		switch {
		default:
			return "other"

		case (v == 0) && (i10 == 1) && (i100 != 11):
			return "one"

		case (v == 0) && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14):
			return "few"

		case (v == 0) && (i10 == 0), (v == 0) && (i10 >= 5 && i10 <= 9), (v == 0) && (i100 >= 11 && i100 <= 14):
			return "many"
		}
    }

    plural_funcs["ur"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["uz"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["ve"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["vi"] = func(n float64, ordinal bool) string {
		if ordinal {
			switch {
			default:
				return "other"

			case n == 1:
				return "one"
			}
		}

		return "other"
    }

    plural_funcs["vo"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["vun"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["wa"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n >= 0 && n <= 1:
			return "one"
		}
    }

    plural_funcs["wae"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["wo"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["xh"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["xog"] = func(n float64, ordinal bool) string {
		switch {
		default:
			return "other"

		case n == 1:
			return "one"
		}
    }

    plural_funcs["yi"] = func(n float64, ordinal bool) string {
		_, i, v, _ := fivt(n)

		switch {
		default:
			return "other"

		case (i == 1) && (v == 0):
			return "one"
		}
    }

    plural_funcs["yo"] = func(n float64, ordinal bool) string {
		return "other"
    }

    plural_funcs["zh"] = func(n float64, ordinal bool) string {
		if ordinal {
			return "other"
		}

		return "other"
    }

    plural_funcs["zu"] = func(n float64, ordinal bool) string {
		i := int(n)

		if ordinal {
			return "other"
		}

		switch {
		default:
			return "other"

		case i == 0, n == 1:
			return "one"
		}
    }
}

func GetFunc(name string) (func(float64, bool) string, error) {
    fn, ok := plural_funcs[name]
    if !ok {
        return nil, fmt.Errorf("UnknownCulture: `%s`", name)
    }
    return fn, nil
}
